{"version":3,"sources":["resources/ping.mp3","resources/cross.jpg","Text.js","App.js","index.js"],"names":["module","exports","font","THREE","parse","fontJson","geom","map","number","size","height","Text","color","children","props","array","useMemo","dispose","char","index","position","length","key","geometry","parseInt","attach","transparent","opacity","ping","Audio","pingSound","create","set","count","welcome","api","pong","velocity","currentTime","volume","clamp","play","state","reset","useStore","Paddle","useLoader","GLTFLoader","nodes","materials","model","useRef","useBox","type","args","onCollide","e","contact","impactVelocity","ref","values","useFrame","current","lerp","mouse","x","Math","PI","y","rotation","scale","toString","object","Bone","Bone003","Bone006","Bone010","castShadow","receiveShadow","material","glove","material-roughness","arm","skeleton","wood","mesh_0","side","mesh_1","foam","mesh_2","lower","mesh_3","upper","mesh_4","Ball","earthImg","useSphere","mass","ContactGround","usePlane","onClick","useCallback","shadowMap","sRGB","camera","fov","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","shadow-bias","iterations","tolerance","defaultContactMaterial","friction","restitution","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","gravity","allowSleep","fallback","className","style","display","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.7e5739b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ping.e49c4b6b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cross.00397b42.jpg\";","import * as THREE from \"three\"\nimport React, { useMemo } from \"react\"\nimport fontJson from \"./resources/firasans_regular.json\"\n\nconst font = new THREE.FontLoader().parse(fontJson)\nconst geom = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].map(number => new THREE.TextGeometry(number, { font, size: 5, height: 0.1 }))\n\nexport default function Text({ color, children, ...props }) {\n  const array = useMemo(() => [...children], [children])\n  return (\n    <group {...props} dispose={null}>\n      {array.map((char, index) => (\n        <mesh position={[-(array.length / 2) * 3.5 + index * 3.5, 0, 0]} key={index} geometry={geom[parseInt(char)]}>\n          <meshBasicMaterial attach=\"material\" color={color} transparent opacity={0.5} />\n        </mesh>\n      ))}\n    </group>\n  )\n}\n","// react-three-fiber is a way to express threejs declaratively: https://github.com/react-spring/react-three-fiber\nimport { Canvas, useFrame, useLoader } from \"react-three-fiber\"\n// use-cannon is a hook around the cannon.js physics library: https://github.com/react-spring/use-cannon\nimport { Physics, useSphere, useBox, usePlane } from \"use-cannon\"\n// zustand is a minimal state-manager: https://github.com/react-spring/zustand\nimport create from \"zustand\"\n\nimport * as THREE from \"three\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport React, { Suspense, useRef, useCallback } from \"react\"\nimport lerp from \"lerp\"\nimport clamp from \"lodash-es/clamp\"\nimport Text from \"./Text\"\nimport pingSound from \"./resources/ping.mp3\"\nimport earthImg from \"./resources/cross.jpg\"\n\n// Create a store ...\nconst ping = new Audio(pingSound)\nconst [useStore] = create((set) => ({\n  count: 0,\n  welcome: true,\n  api: {\n    pong(velocity) {\n      ping.currentTime = 0\n      ping.volume = clamp(velocity / 20, 0, 1)\n      ping.play()\n      if (velocity > 4) set((state) => ({ count: state.count + 1 }))\n    },\n    reset: (welcome) => set((state) => ({ welcome, count: welcome ? state.count : 0 })),\n  },\n}))\n\n// The paddle was made in blender and auto-converted to JSX by https://github.com/react-spring/gltfjsx\nfunction Paddle() {\n  // Load the gltf file\n  const { nodes, materials } = useLoader(GLTFLoader, \"/pingpong.glb\")\n  // Fetch some reactive state\n  const { pong } = useStore((state) => state.api)\n  const welcome = useStore((state) => state.welcome)\n  const count = useStore((state) => state.count)\n  const model = useRef()\n  // Make it a physical object that adheres to gravitation and impact\n  const [ref, api] = useBox(() => ({ type: \"Kinematic\", args: [3.4, 1, 3.5], onCollide: (e) => pong(e.contact.impactVelocity) }))\n  // use-frame allows the component to subscribe to the render-loop for frame-based actions\n  let values = useRef([0, 0])\n  useFrame((state) => {\n    // The paddle is kinematic (not subject to gravitation), we move it with the api returned by useBox\n    values.current[0] = lerp(values.current[0], (state.mouse.x * Math.PI) / 5, 0.2)\n    values.current[1] = lerp(values.current[1], (state.mouse.x * Math.PI) / 5, 0.2)\n    api.position.set(state.mouse.x * 10, state.mouse.y * 5, 0)\n    api.rotation.set(0, 0, values.current[1])\n    // Left/right mouse movement rotates it a liitle for effect only\n    model.current.rotation.x = lerp(model.current.rotation.x, welcome ? Math.PI / 2 : 0, 0.2)\n    model.current.rotation.y = values.current[0]\n  })\n  return (\n    <mesh ref={ref} dispose={null}>\n      <group ref={model} position={[-0.05, 0.37, 0.3]} scale={[0.15, 0.15, 0.15]}>\n        <Text rotation={[-Math.PI / 2, 0, 0]} position={[0, 1, 2]} size={1} children={count.toString()} />\n        <group rotation={[1.88, -0.35, 2.32]} scale={[2.97, 2.97, 2.97]}>\n          <primitive object={nodes.Bone} />\n          <primitive object={nodes.Bone003} />\n          <primitive object={nodes.Bone006} />\n          <primitive object={nodes.Bone010} />\n          <skinnedMesh castShadow receiveShadow material={materials.glove} material-roughness={1} geometry={nodes.arm.geometry} skeleton={nodes.arm.skeleton} />\n        </group>\n        <group rotation={[0, -0.04, 0]} scale={[141.94, 141.94, 141.94]}>\n          <mesh castShadow receiveShadow material={materials.wood} geometry={nodes.mesh_0.geometry} />\n          <mesh castShadow receiveShadow material={materials.side} geometry={nodes.mesh_1.geometry} />\n          <mesh castShadow receiveShadow material={materials.foam} geometry={nodes.mesh_2.geometry} />\n          <mesh castShadow receiveShadow material={materials.lower} geometry={nodes.mesh_3.geometry} />\n          <mesh castShadow receiveShadow material={materials.upper} geometry={nodes.mesh_4.geometry} />\n        </group>\n      </group>\n    </mesh>\n  )\n}\n\nfunction Ball() {\n  // Load texture (the black plus sign)\n  const map = useLoader(THREE.TextureLoader, earthImg)\n  // Make the ball a physics object with a low mass\n  const [ref] = useSphere(() => ({ mass: 1, args: 0.5, position: [0, 5, 0] }))\n  return (\n    <mesh castShadow ref={ref}>\n      <sphereBufferGeometry attach=\"geometry\" args={[0.5, 64, 64]} />\n      <meshStandardMaterial attach=\"material\" map={map} />\n    </mesh>\n  )\n}\n\nfunction ContactGround() {\n  // When the ground was hit we reset the game ...\n  const { reset } = useStore((state) => state.api)\n  const [ref] = usePlane(() => ({ type: \"Static\", rotation: [-Math.PI / 2, 0, 0], position: [0, -10, 0], onCollide: () => reset(true) }))\n  return <mesh ref={ref} />\n}\n\nexport default function () {\n  const welcome = useStore((state) => state.welcome)\n  const { reset } = useStore((state) => state.api)\n  const onClick = useCallback(() => welcome && reset(false), [welcome, reset])\n  return (\n    <>\n      <Canvas shadowMap sRGB camera={{ position: [0, 5, 12], fov: 50 }} onClick={onClick}>\n        <color attach=\"background\" args={[\"#171720\"]} />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[-10, -10, -10]} />\n        <spotLight\n          position={[10, 10, 10]}\n          angle={0.3}\n          penumbra={1}\n          intensity={1}\n          castShadow\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-bias={-0.0001}\n        />\n        <Physics\n          iterations={20}\n          tolerance={0.0001}\n          defaultContactMaterial={{\n            friction: 0.9,\n            restitution: 0.7,\n            contactEquationStiffness: 1e7,\n            contactEquationRelaxation: 1,\n            frictionEquationStiffness: 1e7,\n            frictionEquationRelaxation: 2,\n          }}\n          gravity={[0, -40, 0]}\n          allowSleep={false}>\n          <mesh position={[0, 0, -10]} receiveShadow>\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n            <meshPhongMaterial attach=\"material\" color=\"#172017\" />\n          </mesh>\n          <ContactGround />\n          {!welcome && <Ball />}\n          <Suspense fallback={null}>\n            <Paddle />\n          </Suspense>\n        </Physics>\n      </Canvas>\n      <div className=\"startup\" style={{ display: welcome ? \"block\" : \"none\" }}>\n        * click to start ...\n      </div>\n    </>\n  )\n}\n","import { render } from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport \"./styles.css\"\n\nrender(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}